{
    "tiles": {
        /*
        A tile item is keyed by its id. These ids will be used in the groundMap later in this file to identify the location of the tile.
        DON'T use "0" as id/key since it represents empty tiles in the groundMap.
        A tile should include the following attributes:
            movable:    (true/false) This defines weather other characters can move onto this type of tile.
            path:       (String) Image name/id as it is accessed throughout a cached spritesheet or with a path externally.
        */
        "1":  { "movable": true,  "path": "t_1.png" },
        "2":  { "movable": true,  "path": "t_2.png" },
        "11": { "movable": false, "path": "t_s_1.png" },
        "12": { "movable": false, "path": "t_s_2.png" },
        "13": { "movable": false, "path": "t_s_3.png" },
        "14": { "movable": false, "path": "t_s_4.png" },
        "15": { "movable": false, "path": "t_s_5.png" },
        "16": { "movable": false, "path": "t_s_6.png" }
    },
    "objects": {
        /* 
        An object item is keyed by its id. These ids will be used in the objectsMap later in this file to identify location of the object.
        DON'T use "0" as id/key since it represents the case of no-objects in the objectsMap.
        An object item should include the following attributes:
            movable:        (true/false) This defines weather other characters can move onto a tile that this object sits on.
            interactive:    (true/false) This specifies weather the user can select/interact with the object. The engine will use the callbacks to inform 
                            the developer once the object is selected by the user.
            rowSpan:        (Integer 0<) This specifies the size of the object in terms of number of rows it allocates.
            columnSpan:     (Integer 0<) This specifies the size of the object in terms of number of columns it allocates.
            noTransparency: (true/false) This specifies if the engine will make the object transperent or not when the main controller is behind it.
            floor:          (true/false) This specifies if the object is a floor-object (like a rug) or not.
            visuals:        (Object) This is the container that holds all the visuals available for the map object.
                            It should include AT LEAST one visual with the id/key "idle".
        */
        "1": {
            "movable": false, "interactive": false, "rowSpan": 1, "columnSpan": 1, "noTransparency": false, "floor": false, 
            "visuals": { "idle": { "frames": [ { "path": "o_1.png" } ] } }
        },
        "2": {
            "movable": false, "interactive": false, "rowSpan": 1, "columnSpan": 1, "noTransparency": false, "floor": false, 
            "visuals": { "idle": { "frames": [ { "path": "o_2.png" } ] } }
        },
        "3": {
            "movable": true,  "interactive": false, "rowSpan": 1, "columnSpan": 1, "noTransparency": true,  "floor": false, 
            "visuals": {
                /*
                Visuals are keyed by their id (i.e. "idle", "shoot_anim", "flip" etc.). You will use this to change object texture/animation any time.
                You can create your visuals (textures/animations) in two ways.
                    
                    1. Either using "frames" property to specify each frame texture if your image names are not in a numeric order like walk1.png, walk2.png ...
                    2. Or in a single visual by providing path-prefix, startIndex, numberOfFrames and extension.
                        i.e. "idle_sw": { "path": "hero_stand_sw_000", "startIndex": 1, "numberOfFrames": 6, "extension": "png" },
                        
                        path:               Image name/id as it is accessed throughout a cached spritesheet or with a path externally.
                        extension:          Image file extension. i.e. png, jpg
                        numberOfFrames:     (Integer 0<) Number of frames in an animation. If it is not an animation but a single texture, set it to 1.
                        startIndex:         (Integer) Starting number of the image name suffix. This is only used for animations where image names are in a numeric order like walk3.png, walk4.png ...
                        ipoc:               (Integer) Interaction-point column-offset for the visual.
                        ipor:               (Integer) Interaction-point row-offset for the visual.
                    
                    If you want to create an interaction point for a visual you can set interaction-point-offset by defining 'ipor' and 'ipoc' as row and column. This 
                    means when the you use methods like 'moveControllableToObj' the engine will move the controllable to this interaction points instead of just the nearest 
                    neighbouring tile. For instance, you can have characters interacting and you can allow your controllable character to interact with other characters 
                    depending on which way they are looking.

                    !!! NOTE 1: Following keys/ids are reserved, so for additional animations use different ids:
                                idle_s, idle_sw, idle_w, idle_nw, idle_n, idle_ne, idle_e, idle_se, move_s, move_sw, move_w, move_nw, move_n, move_ne, move_e, move_se
                    !!! NOTE 2: "frames" of a visual has priority over attributes defining animation sequences. So if you use both the engine will process only the "frames" property.
                    !!! NOTE 3: For an object, at minimum, one visual with the id "idle" is required. This will also be used as the initial visual (single texture or animation sequence)
                                that will be applied to your object until you change it in your own logic. 
                */
                "idle": {
                    "frames": [
                        { "path": "hero_stand_se_0001.png" },
                        { "path": "hero_stand_se_0002.png" },
                        { "path": "hero_stand_se_0003.png" },
                        { "path": "hero_stand_se_0004.png" },
                        { "path": "hero_stand_se_0005.png" },
                        { "path": "hero_stand_se_0006.png" }
                    ]
                },
                "idle_s": {
                    "frames": [
                        { "path": "hero_stand_se_0001.png" },
                        { "path": "hero_stand_se_0002.png" },
                        { "path": "hero_stand_se_0003.png" },
                        { "path": "hero_stand_se_0004.png" },
                        { "path": "hero_stand_se_0005.png" },
                        { "path": "hero_stand_se_0006.png" }
                    ]
                },
                "idle_sw": { "path": "hero_stand_sw_000", "startIndex": 1, "numberOfFrames": 6, "extension": "png" },
                "idle_w":  { "path": "hero_stand_sw_000", "startIndex": 1, "numberOfFrames": 6, "extension": "png" },
                "idle_nw": { "path": "hero_stand_nw_000", "startIndex": 1, "numberOfFrames": 6, "extension": "png" },
                "idle_n":  { "path": "hero_stand_ne_000", "startIndex": 1, "numberOfFrames": 6, "extension": "png" },
                "idle_ne": { "path": "hero_stand_ne_000", "startIndex": 1, "numberOfFrames": 6, "extension": "png" },
                "idle_e":  { "path": "hero_stand_ne_000", "startIndex": 1, "numberOfFrames": 6, "extension": "png" },
                "idle_se": { "path": "hero_stand_se_000", "startIndex": 1, "numberOfFrames": 6, "extension": "png" },
                "move_ne": { "path": "hero_move_ne_000",  "startIndex": 1, "numberOfFrames": 6, "extension": "png" },
                "move_nw": { "path": "hero_move_nw_000",  "startIndex": 1, "numberOfFrames": 6, "extension": "png" },
                "move_se": { "path": "hero_move_se_000",  "startIndex": 1, "numberOfFrames": 6, "extension": "png" },
                "move_sw": { "path": "hero_move_sw_000",  "startIndex": 1, "numberOfFrames": 6, "extension": "png" },
                "flip": {
                    "frames": [
                        { "path": "hero_stand_se_0001.png" },
                        { "path": "hero_stand_se_0001.png" },
                        { "path": "hero_stand_sw_0001.png" },
                        { "path": "hero_stand_sw_0001.png" },
                        { "path": "hero_stand_nw_0001.png" },
                        { "path": "hero_stand_nw_0001.png" },
                        { "path": "hero_stand_ne_0001.png" },
                        { "path": "hero_stand_ne_0001.png" },
                        { "path": "hero_stand_se_0001.png" },
                        { "path": "hero_stand_se_0001.png" }
                    ]
                }
            }
        },
        "5": {
            "movable": false, "interactive": false, "rowSpan": 1, "columnSpan": 1, "noTransparency": false, "floor": false, 
            "visuals": { "idle": { "frames": [ { "path": "o_5.png" } ] } }
        },
        "6": {
            "movable": false, "interactive": false, "rowSpan": 1, "columnSpan": 1, "noTransparency": false, "floor": false, 
            "visuals": { "idle": { "frames": [ { "path": "o_6.png" } ] } }
        },
        "7": {
            "movable": true,  "interactive": false, "rowSpan": 1, "columnSpan": 1, "noTransparency": false, "floor": false, 
            "visuals": { "idle": { "frames": [ { "path": "o_7.png" } ] } }
        },
        "8": {
            "movable": false, "interactive": false, "rowSpan": 1, "columnSpan": 1, "noTransparency": false, "floor": false, 
            "visuals": { "idle": { "frames": [ { "path": "o_8.png" } ] } }
        },
        "9": {
            "movable": false, "interactive": false, "rowSpan": 1, "columnSpan": 1, "noTransparency": false, "floor": false, 
            "visuals": { "idle": { "frames": [ { "path": "o_8.png" } ] } }
        },
        "10": {
            "movable": true,  "interactive": true,  "rowSpan": 1, "columnSpan": 1, "noTransparency": false, "floor": false, 
            "visuals": { "idle": { "ipor": 0, "ipoc": -1, "frames": [ { "path": "o_flag_0.png" } ] } }
        },
        "11": {
            "movable": false, "interactive": false, "rowSpan": 1, "columnSpan": 1, "noTransparency": false, "floor": false, 
            "visuals": { "idle": { "frames": [ { "path": "o_tree_0.png" } ] } }
        },
        "12": {
            "movable": true,  "interactive": false, "rowSpan": 1, "columnSpan": 1, "noTransparency": false, "floor": false, 
            "visuals": { "idle": { "frames": [ { "path": "o_boxes_0.png" } ] } }
        }
    },
    /*
    initialControllableLocation:    Defines the location of the controllable object on the map when it is first initiated.
                                    Uses "columnIndex" and "rowIndex" properties to define row and column indexes.
                                    You don't need to include this tag in your data file if you want to define your controllable later on manually.
    */
    "initialControllableLocation": { "columnIndex": 5, "rowIndex": 10, "controllableId": "3" },
    /*
    tileHighlightImage: The image to be overlayed on the tile when highlighted.
                        Either should be loaded before the engine starts or should be passed to the engine inside the 'assetsToLoad' property.
                        Needs to be the same size with the single tile.
    */
    /*
    singleGroundImage:  Only use if you have a single ground image to layout underneath your map.
                        path: (String) Either should be loaded before the engine starts or should be passed to the engine inside the 'assetsToLoad' property.
                        scale: (Integer) Scale amount to apply to the single-ground-image so that you can use smaller images and scale them up for extra big maps, default 1. 
    */
    /*
    groundMap: Defines ground/terrain layer of the map. 0 means no tile image AND non-walkable area.
	    
        1) When used with "singleGroundImage", you don't necesserily need "tiles" section. You can 
           only include 0s and 1s to define which of the areas on the map are walkable. But you can also 
           still put individual tile images on top of your global ground image by defining them in "tiles" section.
        2) If there is no "singleGroundImage" defined then that means each tile has its own image
           which should be defined under "tiles" section.
    */
    "groundMap": [
        { "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,11,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,1 ,1 ,1 ,1 ,1 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,13,2 ,15,15,15,13,2 ,15,13,2 ,1 ,1 ,1 ,1 ,1 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,14,2 ,0 ,0 ,0 ,14,2 ,0 ,14,2 ,1 ,1 ,1 ,1 ,1 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,1 ,1 ,1 ,1 ,1 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,15,15,13,2 ,2 ,2 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,0 ,0 ,14,2 ,2 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,11,2 ,2 ,2 ,2 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,2" },
		{ "row": "11,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,1 ,1 ,1 ,2 ,2 ,2 ,2 ,2 ,1 ,2" },
		{ "row": "14,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,0 ,11,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,1 ,1 ,1 ,1 ,2 ,2 ,2 ,2 ,2 ,2 ,1 ,2" },
		{ "row": "14,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,1 ,2" },
		{ "row": "14,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,15,13,2 ,2 ,2 ,2 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,2 ,2 ,2 ,2 ,2 ,2 ,1 ,2" },
		{ "row": "14,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,16,0 ,12,13,2 ,2 ,2 ,2 ,2 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,2 ,2 ,2 ,2 ,2 ,1 ,2" },
		{ "row": "12,15,15,15,15,15,15,15,16,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,2 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,2 ,1 ,1 ,2 ,2 ,2 ,2 ,2 ,1 ,1 ,2 ,1 ,1 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,1 ,1 ,1 ,2 ,15,15,13,2 ,1 ,1 ,2 ,1 ,1 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,1 ,1 ,1 ,2 ,14,1 ,14,2 ,1 ,1 ,2 ,1 ,1 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,2 ,1 ,1 ,2 ,14,1 ,14,2 ,1 ,1 ,2 ,1 ,1 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,2 ,2 ,1 ,2 ,14,1 ,14,2 ,1 ,1 ,2 ,1 ,1 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,12,15,14,2 ,1 ,1 ,2 ,1 ,1 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,11,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,12,15,15,15,15,15,15,15,15,15,16,12,15,15,15,15,15,15,15,16" }
    ],
    /*
    objectsMap: Defines object layer of the map. 0 means no object for that location.
    */
    "objectsMap": [
        { "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,2 ,5 ,2 ,5 ,2 ,5 ,2 ,5 ,2 ,5 ,2 ,5 ,2 ,5 ,2 ,5 ,2 ,1" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,11,0 ,11,0 ,11,0 ,11,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,11,0 ,11,0 ,11,0 ,5" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,11,0 ,11,0 ,11,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,11,0 ,11,0 ,11,0 ,11,0 ,5" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,11,0 ,11,0 ,11,0 ,11,1" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,11,0 ,11,0 ,11,0 ,5" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1" },
		{ "row": "0 ,8 ,2 ,8 ,2 ,8 ,2 ,8 ,2 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,12,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,8 ,7 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,2 ,2 ,2 ,0 ,0 ,6" },
		{ "row": "0 ,0 ,10,0 ,0 ,3 ,0 ,0 ,12,0 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,10,2 ,0 ,0 ,6" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,8 ,7 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,2 ,2 ,2 ,0 ,0 ,6" },
		{ "row": "0 ,8 ,2 ,8 ,2 ,8 ,2 ,8 ,2 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,12,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,5" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,11,0 ,0 ,1" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ,0 ,0 ,10,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,5" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,11,0 ,0 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,5" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,11,0 ,0 ,2" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,2 ,5 ,2 ,5 ,2 ,5 ,2 ,2 ,2 ,0 ,2 ,2 ,2 ,5 ,2 ,5 ,2 ,1" },
		{ "row": "0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0" }
    ]
}
